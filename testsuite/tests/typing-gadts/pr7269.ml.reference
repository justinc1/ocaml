
# type s = [ `A | `B ]
and sub = [ `B ]
# type +'a t = T : [< `Conj of 'a & sub | `Other of string ] -> 'a t
#   Characters 7-48:
  let f (T (`Other msg) : s t) = print_string msg;;
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
T (`Conj _)
val f : s t -> unit = <fun>
# Exception: Match_failure ("//toplevel//", 2, 6).
#                   module M :
  sig
    type s
    type t = T : [< `Conj of int & s | `Other of string ] -> t
    val x : t
  end
#   Characters 17-64:
  let () = M.(match x with T (`Other msg) -> print_string msg);; (* warn *)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
T (`Conj _)
Exception: Match_failure ("//toplevel//", 12, 12).
#                       module M :
  sig
    type s
    type elim = {
      ex : 'a. ([< `Conj of int & s | `Other of string ] as 'a) -> unit;
    }
    val e : elim -> unit
  end
#   Characters 26-62:
  let () = M.(e { ex = fun (`Other msg) -> print_string msg });; (* warn *)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
`Conj _
Exception: Match_failure ("//toplevel//", 24, 21).
# 
